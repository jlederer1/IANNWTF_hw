{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 167,
   "id": "b1575cbb-ac5b-4dbe-b268-803d82c91777",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import tensorflow as tf\n",
    "import tensorflow_datasets as tfds\n",
    "import keras_cv # install keras_cv with pip for data augmentation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 182,
   "id": "c0492d12-d2a1-4ae5-8754-8d377b94a163",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_cifar10(batch_size, augmentation=None):\n",
    "    \"\"\"\n",
    "    Load and prepare CIFAR-10 as a tensorflow dataset.\n",
    "    Returns a train and a validation dataset.\n",
    "    Args:\n",
    "    batch_size (int)\n",
    "    \"\"\"\n",
    "    train_ds, val_ds = tfds.load('cifar10', split=['train', 'test'], shuffle_files=True)\n",
    "\n",
    "    one_hot = lambda x: tf.one_hot(x, 10)\n",
    "\n",
    "    map_func = lambda x,y: (tf.cast(x, dtype=tf.float32)/255.,\n",
    "                            tf.cast(one_hot(y),tf.float32))\n",
    "\n",
    "    map_func_2 = lambda x: (x[\"image\"],x[\"label\"])\n",
    "\n",
    "    train_ds = train_ds.map(map_func_2).map(map_func).cache()\n",
    "    val_ds   = val_ds.map(map_func_2).map(map_func).cache()\n",
    "    \n",
    "    train_ds = train_ds.shuffle(4096).batch(batch_size)\n",
    "    val_ds   = val_ds.shuffle(4096).batch(batch_size)\n",
    "    if augmentation:\n",
    "        train_ds = train_ds.map(lambda x,y : (augmentation_model(x), y),num_parallel_calls=tf.data.AUTOTUNE)\n",
    "\n",
    "    return (train_ds.prefetch(tf.data.AUTOTUNE), val_ds.prefetch(tf.data.AUTOTUNE))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 198,
   "id": "952ed6bb-073e-41d4-811f-96f7b088e432",
   "metadata": {},
   "outputs": [],
   "source": [
    "class ConvModel(tf.keras.Model):\n",
    "    def __init__(self, L2_reg=0, dropout_rate=0, batch_norm=False):\n",
    "        super().__init__()\n",
    "        \n",
    "        kernel_regularizer=tf.keras.regularizers.L2(L2_reg) if L2_reg else None\n",
    "        self.dropout_rate = dropout_rate\n",
    "        if self.dropout_rate:\n",
    "            self.dropout_layer = tf.keras.layers.Dropout(dropout_rate)\n",
    "            \n",
    "        self.layer_list = [tf.keras.layers.Conv2D(32, 3, activation=\"relu\", kernel_regularizer=kernel_regularizer), \n",
    "            tf.keras.layers.Conv2D(32, 3,activation=\"relu\", kernel_regularizer=kernel_regularizer),\n",
    "            tf.keras.layers.Conv2D(32, 3, activation=\"relu\", kernel_regularizer=kernel_regularizer),\n",
    "            tf.keras.layers.Conv2D(32, 3, activation=\"relu\", kernel_regularizer=kernel_regularizer),\n",
    "            tf.keras.layers.Flatten(),\n",
    "            tf.keras.layers.Dense(10, activation=\"softmax\", kernel_regularizer=kernel_regularizer)]\n",
    "        if batch_norm:\n",
    "            \n",
    "                self.layer_list = [tf.keras.layers.Conv2D(32, 3, activation=\"relu\", kernel_regularizer=kernel_regularizer), \n",
    "                                   tf.keras.layers.BatchNormalization(),\n",
    "                                    tf.keras.layers.Conv2D(32, 3,activation=\"relu\", kernel_regularizer=kernel_regularizer),\n",
    "                                   tf.keras.layers.BatchNormalization(),\n",
    "                                    tf.keras.layers.Conv2D(32, 3, activation=\"relu\", kernel_regularizer=kernel_regularizer),\n",
    "                                   tf.keras.layers.BatchNormalization(),\n",
    "                                    tf.keras.layers.Conv2D(32, 3, activation=\"relu\", kernel_regularizer=kernel_regularizer),\n",
    "                                   tf.keras.layers.BatchNormalization(),\n",
    "                                    tf.keras.layers.Flatten(),\n",
    "                                   #tf.keras.layers.BatchNormalization(),\n",
    "                                    tf.keras.layers.Dense(10, activation=\"softmax\", kernel_regularizer=kernel_regularizer)]\n",
    "        # metrics to update\n",
    "        self.frobenius_metric = tf.keras.metrics.Mean(name=\"total_frobenius_norm\")\n",
    "        self.loss_metric = tf.keras.metrics.Mean(name=\"loss\")\n",
    "        self.accuracy_metric = tf.keras.metrics.CategoricalAccuracy(name=\"accuracy\")\n",
    "        \n",
    "    def call(self, x, training=False):\n",
    "        for layer in self.layer_list[:-1]:\n",
    "            x = layer(x)\n",
    "            if self.dropout_rate:\n",
    "                x = self.dropout_layer(x, training)\n",
    "        \n",
    "        return self.layer_list[-1](x)\n",
    "    \n",
    "    def reset_metrics(self):\n",
    "        for metric in self.metrics:\n",
    "            metric.reset_states()\n",
    "            \n",
    "    def compute_frobenius(self):\n",
    "        frobenius_norm = tf.zeros((1,))\n",
    "        for var in self.trainable_variables:\n",
    "            frobenius_norm += tf.norm(var, ord=\"euclidean\")\n",
    "        return frobenius_norm\n",
    "    \n",
    "    @tf.function\n",
    "    def train_step(self, data):\n",
    "        x, target = data\n",
    "        with tf.GradientTape() as tape:\n",
    "            prediction = self(x, training=True)\n",
    "            loss = self.compiled_loss(target, prediction, regularization_losses=self.losses)\n",
    "        gradients = tape.gradient(loss, self.trainable_variables)\n",
    "        self.optimizer.apply_gradients(zip(gradients, self.trainable_variables))\n",
    "        \n",
    "        self.frobenius_metric.update_state(self.compute_frobenius())\n",
    "        self.loss_metric.update_state(loss)\n",
    "        self.accuracy_metric.update_state(target, prediction)\n",
    "        \n",
    "        return {metric.name: metric.result() for metric in self.metrics}\n",
    "    \n",
    "    @tf.function\n",
    "    def test_step(self, data):\n",
    "        x, target = data\n",
    "        prediction = self(x, training=False)\n",
    "        loss = self.compiled_loss(target, prediction, regularization_losses=self.losses)\n",
    "        \n",
    "        self.frobenius_metric.update_state(self.compute_frobenius())\n",
    "        self.loss_metric.update_state(loss)\n",
    "        self.accuracy_metric.update_state(target, prediction)\n",
    "        \n",
    "        return {metric.name: metric.result() for metric in self.metrics}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "536e0605-c33a-4a53-8c04-45564d46fc63",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true,
    "tags": []
   },
   "source": [
    "## Training the model without any extra regularization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 184,
   "id": "ee2e7d7e-996d-4b3f-8137-2cdd8696e719",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/25\n",
      "1563/1563 [==============================] - 26s 17ms/step - loss: 2.0764 - total_frobenius_norm: 34.4389 - accuracy: 0.2340 - val_loss: 1.6054 - val_total_frobenius_norm: 42.6609 - val_accuracy: 0.4290\n",
      "Epoch 2/25\n",
      "1563/1563 [==============================] - 25s 16ms/step - loss: 1.8765 - total_frobenius_norm: 49.7615 - accuracy: 0.3297 - val_loss: 1.3809 - val_total_frobenius_norm: 56.3138 - val_accuracy: 0.5357\n",
      "Epoch 3/25\n",
      "1563/1563 [==============================] - 25s 16ms/step - loss: 1.7763 - total_frobenius_norm: 60.7844 - accuracy: 0.3685 - val_loss: 1.2767 - val_total_frobenius_norm: 64.9239 - val_accuracy: 0.5603\n",
      "Epoch 4/25\n",
      "1563/1563 [==============================] - 25s 16ms/step - loss: 1.7149 - total_frobenius_norm: 68.6922 - accuracy: 0.3932 - val_loss: 1.2064 - val_total_frobenius_norm: 72.1074 - val_accuracy: 0.5853\n",
      "Epoch 5/25\n",
      "1563/1563 [==============================] - 27s 17ms/step - loss: 1.6638 - total_frobenius_norm: 75.2542 - accuracy: 0.4103 - val_loss: 1.1824 - val_total_frobenius_norm: 78.5689 - val_accuracy: 0.5955\n",
      "Epoch 6/25\n",
      "1563/1563 [==============================] - 26s 16ms/step - loss: 1.6241 - total_frobenius_norm: 81.4108 - accuracy: 0.4251 - val_loss: 1.2009 - val_total_frobenius_norm: 84.4292 - val_accuracy: 0.5753\n",
      "Epoch 7/25\n",
      "1563/1563 [==============================] - 26s 17ms/step - loss: 1.5965 - total_frobenius_norm: 87.1163 - accuracy: 0.4341 - val_loss: 1.1052 - val_total_frobenius_norm: 89.5932 - val_accuracy: 0.6175\n",
      "Epoch 8/25\n",
      "1563/1563 [==============================] - 25s 16ms/step - loss: 1.5735 - total_frobenius_norm: 92.0431 - accuracy: 0.4444 - val_loss: 1.0830 - val_total_frobenius_norm: 94.6900 - val_accuracy: 0.6271\n",
      "Epoch 9/25\n",
      "1563/1563 [==============================] - 25s 16ms/step - loss: 1.5612 - total_frobenius_norm: 96.9519 - accuracy: 0.4529 - val_loss: 1.0352 - val_total_frobenius_norm: 99.2525 - val_accuracy: 0.6362\n",
      "Epoch 10/25\n",
      "1563/1563 [==============================] - 26s 17ms/step - loss: 1.5501 - total_frobenius_norm: 101.1720 - accuracy: 0.4532 - val_loss: 1.0487 - val_total_frobenius_norm: 103.1015 - val_accuracy: 0.6378\n",
      "Epoch 11/25\n",
      "1563/1563 [==============================] - 26s 17ms/step - loss: 1.5357 - total_frobenius_norm: 105.4312 - accuracy: 0.4616 - val_loss: 1.0282 - val_total_frobenius_norm: 108.1561 - val_accuracy: 0.6480\n",
      "Epoch 12/25\n",
      "1563/1563 [==============================] - 26s 16ms/step - loss: 1.5264 - total_frobenius_norm: 110.8490 - accuracy: 0.4639 - val_loss: 1.0216 - val_total_frobenius_norm: 112.9957 - val_accuracy: 0.6493\n",
      "Epoch 13/25\n",
      "1563/1563 [==============================] - 26s 16ms/step - loss: 1.5107 - total_frobenius_norm: 114.8928 - accuracy: 0.4671 - val_loss: 1.0318 - val_total_frobenius_norm: 116.6519 - val_accuracy: 0.6419\n",
      "Epoch 14/25\n",
      "1563/1563 [==============================] - 25s 16ms/step - loss: 1.5087 - total_frobenius_norm: 118.7191 - accuracy: 0.4707 - val_loss: 1.0161 - val_total_frobenius_norm: 120.7634 - val_accuracy: 0.6434\n",
      "Epoch 15/25\n",
      "1563/1563 [==============================] - 25s 16ms/step - loss: 1.4995 - total_frobenius_norm: 122.6978 - accuracy: 0.4746 - val_loss: 1.0161 - val_total_frobenius_norm: 124.6210 - val_accuracy: 0.6501\n",
      "Epoch 16/25\n",
      "1563/1563 [==============================] - 24s 15ms/step - loss: 1.5005 - total_frobenius_norm: 126.4983 - accuracy: 0.4720 - val_loss: 0.9909 - val_total_frobenius_norm: 128.2292 - val_accuracy: 0.6506\n",
      "Epoch 17/25\n",
      "1560/1563 [============================>.] - ETA: 0s - loss: 1.4808 - total_frobenius_norm: 130.1634 - accuracy: 0.4816"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "Cell \u001b[0;32mIn [184], line 4\u001b[0m\n\u001b[1;32m      2\u001b[0m model \u001b[38;5;241m=\u001b[39m ConvModel()\n\u001b[1;32m      3\u001b[0m model\u001b[38;5;241m.\u001b[39mcompile(loss\u001b[38;5;241m=\u001b[39mloss, optimizer\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124madam\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m----> 4\u001b[0m history_of \u001b[38;5;241m=\u001b[39m \u001b[43mmodel\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfit\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtrain_ds\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mvalidation_data\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mval_ds\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mepochs\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;241;43m25\u001b[39;49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m~/anaconda3/envs/tensorflow/lib/python3.10/site-packages/keras/utils/traceback_utils.py:65\u001b[0m, in \u001b[0;36mfilter_traceback.<locals>.error_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     63\u001b[0m filtered_tb \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[1;32m     64\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m---> 65\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mfn\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     66\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mException\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m e:\n\u001b[1;32m     67\u001b[0m     filtered_tb \u001b[38;5;241m=\u001b[39m _process_traceback_frames(e\u001b[38;5;241m.\u001b[39m__traceback__)\n",
      "File \u001b[0;32m~/anaconda3/envs/tensorflow/lib/python3.10/site-packages/keras/engine/training.py:1606\u001b[0m, in \u001b[0;36mModel.fit\u001b[0;34m(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, validation_batch_size, validation_freq, max_queue_size, workers, use_multiprocessing)\u001b[0m\n\u001b[1;32m   1591\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mgetattr\u001b[39m(\u001b[38;5;28mself\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m_eval_data_handler\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28;01mNone\u001b[39;00m) \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m   1592\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_eval_data_handler \u001b[38;5;241m=\u001b[39m data_adapter\u001b[38;5;241m.\u001b[39mget_data_handler(\n\u001b[1;32m   1593\u001b[0m         x\u001b[38;5;241m=\u001b[39mval_x,\n\u001b[1;32m   1594\u001b[0m         y\u001b[38;5;241m=\u001b[39mval_y,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m   1604\u001b[0m         steps_per_execution\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_steps_per_execution,\n\u001b[1;32m   1605\u001b[0m     )\n\u001b[0;32m-> 1606\u001b[0m val_logs \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mevaluate\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m   1607\u001b[0m \u001b[43m    \u001b[49m\u001b[43mx\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mval_x\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1608\u001b[0m \u001b[43m    \u001b[49m\u001b[43my\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mval_y\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1609\u001b[0m \u001b[43m    \u001b[49m\u001b[43msample_weight\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mval_sample_weight\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1610\u001b[0m \u001b[43m    \u001b[49m\u001b[43mbatch_size\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mvalidation_batch_size\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;129;43;01mor\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43mbatch_size\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1611\u001b[0m \u001b[43m    \u001b[49m\u001b[43msteps\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mvalidation_steps\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1612\u001b[0m \u001b[43m    \u001b[49m\u001b[43mcallbacks\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcallbacks\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1613\u001b[0m \u001b[43m    \u001b[49m\u001b[43mmax_queue_size\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mmax_queue_size\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1614\u001b[0m \u001b[43m    \u001b[49m\u001b[43mworkers\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mworkers\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1615\u001b[0m \u001b[43m    \u001b[49m\u001b[43muse_multiprocessing\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43muse_multiprocessing\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1616\u001b[0m \u001b[43m    \u001b[49m\u001b[43mreturn_dict\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mTrue\u001b[39;49;00m\u001b[43m,\u001b[49m\n\u001b[1;32m   1617\u001b[0m \u001b[43m    \u001b[49m\u001b[43m_use_cached_eval_dataset\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mTrue\u001b[39;49;00m\u001b[43m,\u001b[49m\n\u001b[1;32m   1618\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1619\u001b[0m val_logs \u001b[38;5;241m=\u001b[39m {\n\u001b[1;32m   1620\u001b[0m     \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mval_\u001b[39m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;241m+\u001b[39m name: val \u001b[38;5;28;01mfor\u001b[39;00m name, val \u001b[38;5;129;01min\u001b[39;00m val_logs\u001b[38;5;241m.\u001b[39mitems()\n\u001b[1;32m   1621\u001b[0m }\n\u001b[1;32m   1622\u001b[0m epoch_logs\u001b[38;5;241m.\u001b[39mupdate(val_logs)\n",
      "File \u001b[0;32m~/anaconda3/envs/tensorflow/lib/python3.10/site-packages/keras/utils/traceback_utils.py:65\u001b[0m, in \u001b[0;36mfilter_traceback.<locals>.error_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     63\u001b[0m filtered_tb \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[1;32m     64\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m---> 65\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mfn\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     66\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mException\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m e:\n\u001b[1;32m     67\u001b[0m     filtered_tb \u001b[38;5;241m=\u001b[39m _process_traceback_frames(e\u001b[38;5;241m.\u001b[39m__traceback__)\n",
      "File \u001b[0;32m~/anaconda3/envs/tensorflow/lib/python3.10/site-packages/keras/engine/training.py:1947\u001b[0m, in \u001b[0;36mModel.evaluate\u001b[0;34m(self, x, y, batch_size, verbose, sample_weight, steps, callbacks, max_queue_size, workers, use_multiprocessing, return_dict, **kwargs)\u001b[0m\n\u001b[1;32m   1943\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m tf\u001b[38;5;241m.\u001b[39mprofiler\u001b[38;5;241m.\u001b[39mexperimental\u001b[38;5;241m.\u001b[39mTrace(\n\u001b[1;32m   1944\u001b[0m     \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mtest\u001b[39m\u001b[38;5;124m\"\u001b[39m, step_num\u001b[38;5;241m=\u001b[39mstep, _r\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1\u001b[39m\n\u001b[1;32m   1945\u001b[0m ):\n\u001b[1;32m   1946\u001b[0m     callbacks\u001b[38;5;241m.\u001b[39mon_test_batch_begin(step)\n\u001b[0;32m-> 1947\u001b[0m     tmp_logs \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mtest_function\u001b[49m\u001b[43m(\u001b[49m\u001b[43miterator\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1948\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m data_handler\u001b[38;5;241m.\u001b[39mshould_sync:\n\u001b[1;32m   1949\u001b[0m         context\u001b[38;5;241m.\u001b[39masync_wait()\n",
      "File \u001b[0;32m~/anaconda3/envs/tensorflow/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py:150\u001b[0m, in \u001b[0;36mfilter_traceback.<locals>.error_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    148\u001b[0m filtered_tb \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[1;32m    149\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m--> 150\u001b[0m   \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mfn\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    151\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mException\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m e:\n\u001b[1;32m    152\u001b[0m   filtered_tb \u001b[38;5;241m=\u001b[39m _process_traceback_frames(e\u001b[38;5;241m.\u001b[39m__traceback__)\n",
      "File \u001b[0;32m~/anaconda3/envs/tensorflow/lib/python3.10/site-packages/tensorflow/python/eager/def_function.py:915\u001b[0m, in \u001b[0;36mFunction.__call__\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    912\u001b[0m compiler \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mxla\u001b[39m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_jit_compile \u001b[38;5;28;01melse\u001b[39;00m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mnonXla\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    914\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m OptionalXlaContext(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_jit_compile):\n\u001b[0;32m--> 915\u001b[0m   result \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_call\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwds\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    917\u001b[0m new_tracing_count \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mexperimental_get_tracing_count()\n\u001b[1;32m    918\u001b[0m without_tracing \u001b[38;5;241m=\u001b[39m (tracing_count \u001b[38;5;241m==\u001b[39m new_tracing_count)\n",
      "File \u001b[0;32m~/anaconda3/envs/tensorflow/lib/python3.10/site-packages/tensorflow/python/eager/def_function.py:954\u001b[0m, in \u001b[0;36mFunction._call\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    951\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_lock\u001b[38;5;241m.\u001b[39mrelease()\n\u001b[1;32m    952\u001b[0m \u001b[38;5;66;03m# In this case we have not created variables on the first call. So we can\u001b[39;00m\n\u001b[1;32m    953\u001b[0m \u001b[38;5;66;03m# run the first trace but we should fail if variables are created.\u001b[39;00m\n\u001b[0;32m--> 954\u001b[0m results \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_stateful_fn\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwds\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    955\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_created_variables \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m ALLOW_DYNAMIC_VARIABLE_CREATION:\n\u001b[1;32m    956\u001b[0m   \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mCreating variables on a non-first call to a function\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    957\u001b[0m                    \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m decorated with tf.function.\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n",
      "File \u001b[0;32m~/anaconda3/envs/tensorflow/lib/python3.10/site-packages/tensorflow/python/eager/function.py:2496\u001b[0m, in \u001b[0;36mFunction.__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   2493\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_lock:\n\u001b[1;32m   2494\u001b[0m   (graph_function,\n\u001b[1;32m   2495\u001b[0m    filtered_flat_args) \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_maybe_define_function(args, kwargs)\n\u001b[0;32m-> 2496\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mgraph_function\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_call_flat\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m   2497\u001b[0m \u001b[43m    \u001b[49m\u001b[43mfiltered_flat_args\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcaptured_inputs\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mgraph_function\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcaptured_inputs\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m~/anaconda3/envs/tensorflow/lib/python3.10/site-packages/tensorflow/python/eager/function.py:1862\u001b[0m, in \u001b[0;36mConcreteFunction._call_flat\u001b[0;34m(self, args, captured_inputs, cancellation_manager)\u001b[0m\n\u001b[1;32m   1858\u001b[0m possible_gradient_type \u001b[38;5;241m=\u001b[39m gradients_util\u001b[38;5;241m.\u001b[39mPossibleTapeGradientTypes(args)\n\u001b[1;32m   1859\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m (possible_gradient_type \u001b[38;5;241m==\u001b[39m gradients_util\u001b[38;5;241m.\u001b[39mPOSSIBLE_GRADIENT_TYPES_NONE\n\u001b[1;32m   1860\u001b[0m     \u001b[38;5;129;01mand\u001b[39;00m executing_eagerly):\n\u001b[1;32m   1861\u001b[0m   \u001b[38;5;66;03m# No tape is watching; skip to running the function.\u001b[39;00m\n\u001b[0;32m-> 1862\u001b[0m   \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_build_call_outputs(\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_inference_function\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcall\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m   1863\u001b[0m \u001b[43m      \u001b[49m\u001b[43mctx\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcancellation_manager\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcancellation_manager\u001b[49m\u001b[43m)\u001b[49m)\n\u001b[1;32m   1864\u001b[0m forward_backward \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_select_forward_and_backward_functions(\n\u001b[1;32m   1865\u001b[0m     args,\n\u001b[1;32m   1866\u001b[0m     possible_gradient_type,\n\u001b[1;32m   1867\u001b[0m     executing_eagerly)\n\u001b[1;32m   1868\u001b[0m forward_function, args_with_tangents \u001b[38;5;241m=\u001b[39m forward_backward\u001b[38;5;241m.\u001b[39mforward()\n",
      "File \u001b[0;32m~/anaconda3/envs/tensorflow/lib/python3.10/site-packages/tensorflow/python/eager/function.py:499\u001b[0m, in \u001b[0;36m_EagerDefinedFunction.call\u001b[0;34m(self, ctx, args, cancellation_manager)\u001b[0m\n\u001b[1;32m    497\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m _InterpolateFunctionError(\u001b[38;5;28mself\u001b[39m):\n\u001b[1;32m    498\u001b[0m   \u001b[38;5;28;01mif\u001b[39;00m cancellation_manager \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m--> 499\u001b[0m     outputs \u001b[38;5;241m=\u001b[39m \u001b[43mexecute\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mexecute\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    500\u001b[0m \u001b[43m        \u001b[49m\u001b[38;5;28;43mstr\u001b[39;49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msignature\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mname\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    501\u001b[0m \u001b[43m        \u001b[49m\u001b[43mnum_outputs\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_num_outputs\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    502\u001b[0m \u001b[43m        \u001b[49m\u001b[43minputs\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    503\u001b[0m \u001b[43m        \u001b[49m\u001b[43mattrs\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mattrs\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    504\u001b[0m \u001b[43m        \u001b[49m\u001b[43mctx\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mctx\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    505\u001b[0m   \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m    506\u001b[0m     outputs \u001b[38;5;241m=\u001b[39m execute\u001b[38;5;241m.\u001b[39mexecute_with_cancellation(\n\u001b[1;32m    507\u001b[0m         \u001b[38;5;28mstr\u001b[39m(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39msignature\u001b[38;5;241m.\u001b[39mname),\n\u001b[1;32m    508\u001b[0m         num_outputs\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_num_outputs,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    511\u001b[0m         ctx\u001b[38;5;241m=\u001b[39mctx,\n\u001b[1;32m    512\u001b[0m         cancellation_manager\u001b[38;5;241m=\u001b[39mcancellation_manager)\n",
      "File \u001b[0;32m~/anaconda3/envs/tensorflow/lib/python3.10/site-packages/tensorflow/python/eager/execute.py:54\u001b[0m, in \u001b[0;36mquick_execute\u001b[0;34m(op_name, num_outputs, inputs, attrs, ctx, name)\u001b[0m\n\u001b[1;32m     52\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m     53\u001b[0m   ctx\u001b[38;5;241m.\u001b[39mensure_initialized()\n\u001b[0;32m---> 54\u001b[0m   tensors \u001b[38;5;241m=\u001b[39m \u001b[43mpywrap_tfe\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mTFE_Py_Execute\u001b[49m\u001b[43m(\u001b[49m\u001b[43mctx\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_handle\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdevice_name\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mop_name\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m     55\u001b[0m \u001b[43m                                      \u001b[49m\u001b[43minputs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mattrs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mnum_outputs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     56\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m core\u001b[38;5;241m.\u001b[39m_NotOkStatusException \u001b[38;5;28;01mas\u001b[39;00m e:\n\u001b[1;32m     57\u001b[0m   \u001b[38;5;28;01mif\u001b[39;00m name \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "train_ds, val_ds = get_cifar10(32)\n",
    "model = ConvModel()\n",
    "model.compile(loss=tf.keras.losses.CategoricalCrossentropy(), optimizer=\"adam\")\n",
    "history_of = model.fit(train_ds, validation_data=val_ds, epochs=25)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "id": "37294e88-c82e-4b1a-b679-4964abe1b397",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "plt.plot(history_of.history[\"total_frobenius_norm\"]/np.max(history_of.history[\"total_frobenius_norm\"]) * np.max(history_of.history[\"val_loss\"]))\n",
    "plt.plot(history_of.history[\"val_loss\"])\n",
    "plt.plot(history_of.history[\"loss\"])\n",
    "plt.legend(labels=[\"Total Frobenius Norm\", \"Validation Loss\", \"Loss\"])\n",
    "plt.savefig(\"convnet_no_reg.svg\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cb1f14cc-13f0-43db-8ce9-93a33a15fa64",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true,
    "tags": []
   },
   "source": [
    "## Training the same model with L2 regularization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "id": "02a3433b-b8fe-4197-852a-e635a979f052",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/25\n",
      "1563/1563 [==============================] - 6s 4ms/step - loss: 1.6071 - total_frobenius_norm: 20.6495 - accuracy: 0.4574 - val_loss: 1.4180 - val_total_frobenius_norm: 22.4715 - val_accuracy: 0.5467\n",
      "Epoch 2/25\n",
      "1563/1563 [==============================] - 6s 4ms/step - loss: 1.3493 - total_frobenius_norm: 23.9640 - accuracy: 0.5721 - val_loss: 1.3117 - val_total_frobenius_norm: 25.0946 - val_accuracy: 0.5899\n",
      "Epoch 3/25\n",
      "1563/1563 [==============================] - 6s 4ms/step - loss: 1.2432 - total_frobenius_norm: 25.8170 - accuracy: 0.6180 - val_loss: 1.2222 - val_total_frobenius_norm: 26.4384 - val_accuracy: 0.6286\n",
      "Epoch 4/25\n",
      "1563/1563 [==============================] - 6s 4ms/step - loss: 1.1792 - total_frobenius_norm: 26.9100 - accuracy: 0.6471 - val_loss: 1.2392 - val_total_frobenius_norm: 27.2993 - val_accuracy: 0.6304\n",
      "Epoch 5/25\n",
      "1563/1563 [==============================] - 6s 4ms/step - loss: 1.1423 - total_frobenius_norm: 27.7532 - accuracy: 0.6605 - val_loss: 1.1546 - val_total_frobenius_norm: 28.1556 - val_accuracy: 0.6569\n",
      "Epoch 6/25\n",
      "1563/1563 [==============================] - 6s 4ms/step - loss: 1.1212 - total_frobenius_norm: 28.5728 - accuracy: 0.6719 - val_loss: 1.1612 - val_total_frobenius_norm: 28.9395 - val_accuracy: 0.6566\n",
      "Epoch 7/25\n",
      "1563/1563 [==============================] - 6s 4ms/step - loss: 1.0960 - total_frobenius_norm: 29.2556 - accuracy: 0.6828 - val_loss: 1.1862 - val_total_frobenius_norm: 29.6380 - val_accuracy: 0.6500\n",
      "Epoch 8/25\n",
      "1563/1563 [==============================] - 6s 4ms/step - loss: 1.0802 - total_frobenius_norm: 29.9989 - accuracy: 0.6902 - val_loss: 1.1449 - val_total_frobenius_norm: 30.3451 - val_accuracy: 0.6690\n",
      "Epoch 9/25\n",
      "1563/1563 [==============================] - 6s 4ms/step - loss: 1.0658 - total_frobenius_norm: 30.6880 - accuracy: 0.6996 - val_loss: 1.1716 - val_total_frobenius_norm: 30.9853 - val_accuracy: 0.6639\n",
      "Epoch 10/25\n",
      "1563/1563 [==============================] - 6s 4ms/step - loss: 1.0543 - total_frobenius_norm: 31.3342 - accuracy: 0.7050 - val_loss: 1.1114 - val_total_frobenius_norm: 31.7148 - val_accuracy: 0.6848\n",
      "Epoch 11/25\n",
      "1563/1563 [==============================] - 6s 4ms/step - loss: 1.0447 - total_frobenius_norm: 32.0559 - accuracy: 0.7109 - val_loss: 1.2310 - val_total_frobenius_norm: 32.3883 - val_accuracy: 0.6546\n",
      "Epoch 12/25\n",
      "1563/1563 [==============================] - 6s 4ms/step - loss: 1.0382 - total_frobenius_norm: 32.7547 - accuracy: 0.7162 - val_loss: 1.1881 - val_total_frobenius_norm: 33.0456 - val_accuracy: 0.6635\n",
      "Epoch 13/25\n",
      "1563/1563 [==============================] - 6s 4ms/step - loss: 1.0271 - total_frobenius_norm: 33.4085 - accuracy: 0.7240 - val_loss: 1.1790 - val_total_frobenius_norm: 33.7285 - val_accuracy: 0.6690\n",
      "Epoch 14/25\n",
      "1563/1563 [==============================] - 6s 4ms/step - loss: 1.0173 - total_frobenius_norm: 34.0562 - accuracy: 0.7287 - val_loss: 1.1336 - val_total_frobenius_norm: 34.3083 - val_accuracy: 0.6867\n",
      "Epoch 15/25\n",
      "1563/1563 [==============================] - 7s 4ms/step - loss: 1.0138 - total_frobenius_norm: 34.6339 - accuracy: 0.7326 - val_loss: 1.1689 - val_total_frobenius_norm: 34.9151 - val_accuracy: 0.6822\n",
      "Epoch 16/25\n",
      "1563/1563 [==============================] - 6s 4ms/step - loss: 1.0089 - total_frobenius_norm: 35.2784 - accuracy: 0.7359 - val_loss: 1.1657 - val_total_frobenius_norm: 35.6054 - val_accuracy: 0.6881\n",
      "Epoch 17/25\n",
      "1563/1563 [==============================] - 6s 4ms/step - loss: 1.0007 - total_frobenius_norm: 35.8821 - accuracy: 0.7422 - val_loss: 1.2321 - val_total_frobenius_norm: 36.1523 - val_accuracy: 0.6721\n",
      "Epoch 18/25\n",
      "1563/1563 [==============================] - 6s 4ms/step - loss: 0.9984 - total_frobenius_norm: 36.5000 - accuracy: 0.7455 - val_loss: 1.2320 - val_total_frobenius_norm: 36.7325 - val_accuracy: 0.6684\n",
      "Epoch 19/25\n",
      "1563/1563 [==============================] - 6s 4ms/step - loss: 0.9859 - total_frobenius_norm: 37.0187 - accuracy: 0.7516 - val_loss: 1.2002 - val_total_frobenius_norm: 37.2363 - val_accuracy: 0.6832\n",
      "Epoch 20/25\n",
      "1563/1563 [==============================] - 6s 4ms/step - loss: 0.9830 - total_frobenius_norm: 37.6002 - accuracy: 0.7541 - val_loss: 1.2334 - val_total_frobenius_norm: 37.8593 - val_accuracy: 0.6753\n",
      "Epoch 21/25\n",
      "1563/1563 [==============================] - 6s 4ms/step - loss: 0.9802 - total_frobenius_norm: 38.1678 - accuracy: 0.7592 - val_loss: 1.2029 - val_total_frobenius_norm: 38.4255 - val_accuracy: 0.6875\n",
      "Epoch 22/25\n",
      "1563/1563 [==============================] - 6s 4ms/step - loss: 0.9737 - total_frobenius_norm: 38.7644 - accuracy: 0.7650 - val_loss: 1.2681 - val_total_frobenius_norm: 39.0023 - val_accuracy: 0.6773\n",
      "Epoch 23/25\n",
      "1563/1563 [==============================] - 6s 4ms/step - loss: 0.9713 - total_frobenius_norm: 39.3096 - accuracy: 0.7686 - val_loss: 1.2277 - val_total_frobenius_norm: 39.5046 - val_accuracy: 0.6897\n",
      "Epoch 24/25\n",
      "1563/1563 [==============================] - 6s 4ms/step - loss: 0.9620 - total_frobenius_norm: 39.7584 - accuracy: 0.7733 - val_loss: 1.2655 - val_total_frobenius_norm: 39.9902 - val_accuracy: 0.6884\n",
      "Epoch 25/25\n",
      "1563/1563 [==============================] - 6s 4ms/step - loss: 0.9587 - total_frobenius_norm: 40.3002 - accuracy: 0.7775 - val_loss: 1.2740 - val_total_frobenius_norm: 40.5257 - val_accuracy: 0.6784\n"
     ]
    }
   ],
   "source": [
    "train_ds, val_ds = get_cifar10(32)\n",
    "model = ConvModel(L2_reg=0.001)\n",
    "model.compile(loss=tf.keras.losses.CategoricalCrossentropy(), optimizer=\"adam\")\n",
    "history_reg = model.fit(train_ds, validation_data=val_ds, epochs=25)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "id": "fa47dd5e-3ee8-4e10-86a1-f390f2d08065",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "plt.plot(history_reg.history[\"total_frobenius_norm\"]/np.max(history_reg.history[\"total_frobenius_norm\"]) * np.max(history_reg.history[\"val_loss\"]))\n",
    "plt.plot(history_reg.history[\"val_loss\"])\n",
    "plt.plot(history_reg.history[\"loss\"])\n",
    "plt.legend(labels=[\"Total Frobenius Norm\", \"Validation Loss\", \"Loss\"])\n",
    "plt.savefig(\"convnet_l2_reg.svg\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "76aacf9c-3a45-49cc-bc90-fc14d8ae09e3",
   "metadata": {
    "tags": []
   },
   "source": [
    "## Training the same model with only data augmentation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 186,
   "id": "e8ad9af7-015a-4e9a-bf80-a983a1f5e67a",
   "metadata": {},
   "outputs": [],
   "source": [
    "augmentation_model = tf.keras.Sequential([keras_cv.layers.RandAugment(value_range=[0,1],magnitude=0.1)])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 187,
   "id": "1096e0e9-c6f7-4b21-a612-e96a4b2e2603",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/25\n",
      "1563/1563 [==============================] - 26s 16ms/step - loss: 1.6451 - total_frobenius_norm: 35.3450 - accuracy: 0.4127 - val_loss: 1.2189 - val_total_frobenius_norm: 43.6863 - val_accuracy: 0.5675\n",
      "Epoch 2/25\n",
      "1563/1563 [==============================] - 25s 16ms/step - loss: 1.3164 - total_frobenius_norm: 50.1017 - accuracy: 0.5422 - val_loss: 1.0543 - val_total_frobenius_norm: 55.7050 - val_accuracy: 0.6377\n",
      "Epoch 3/25\n",
      "1563/1563 [==============================] - 24s 15ms/step - loss: 1.1882 - total_frobenius_norm: 60.2518 - accuracy: 0.5880 - val_loss: 0.9825 - val_total_frobenius_norm: 64.6340 - val_accuracy: 0.6529\n",
      "Epoch 4/25\n",
      "1563/1563 [==============================] - 25s 16ms/step - loss: 1.1107 - total_frobenius_norm: 68.2346 - accuracy: 0.6158 - val_loss: 0.9322 - val_total_frobenius_norm: 71.7109 - val_accuracy: 0.6796\n",
      "Epoch 5/25\n",
      "1563/1563 [==============================] - 24s 15ms/step - loss: 1.0634 - total_frobenius_norm: 74.9723 - accuracy: 0.6323 - val_loss: 0.8863 - val_total_frobenius_norm: 78.1081 - val_accuracy: 0.6920\n",
      "Epoch 6/25\n",
      "1563/1563 [==============================] - 25s 16ms/step - loss: 1.0250 - total_frobenius_norm: 80.8913 - accuracy: 0.6435 - val_loss: 0.9180 - val_total_frobenius_norm: 83.5782 - val_accuracy: 0.6780\n",
      "Epoch 7/25\n",
      "1563/1563 [==============================] - 25s 16ms/step - loss: 0.9966 - total_frobenius_norm: 85.9999 - accuracy: 0.6541 - val_loss: 0.8752 - val_total_frobenius_norm: 88.5006 - val_accuracy: 0.6971\n",
      "Epoch 8/25\n",
      "1563/1563 [==============================] - 25s 16ms/step - loss: 0.9700 - total_frobenius_norm: 90.8805 - accuracy: 0.6632 - val_loss: 0.8794 - val_total_frobenius_norm: 93.2812 - val_accuracy: 0.6988\n",
      "Epoch 9/25\n",
      "1563/1563 [==============================] - 25s 16ms/step - loss: 0.9564 - total_frobenius_norm: 95.2644 - accuracy: 0.6688 - val_loss: 0.8967 - val_total_frobenius_norm: 97.3012 - val_accuracy: 0.6956\n",
      "Epoch 10/25\n",
      "1563/1563 [==============================] - 24s 15ms/step - loss: 0.9392 - total_frobenius_norm: 99.2964 - accuracy: 0.6744 - val_loss: 0.8507 - val_total_frobenius_norm: 101.2594 - val_accuracy: 0.7030\n",
      "Epoch 11/25\n",
      "1563/1563 [==============================] - 27s 17ms/step - loss: 0.9271 - total_frobenius_norm: 103.1821 - accuracy: 0.6818 - val_loss: 0.8879 - val_total_frobenius_norm: 105.3891 - val_accuracy: 0.7030\n",
      "Epoch 12/25\n",
      "1563/1563 [==============================] - 25s 16ms/step - loss: 0.9115 - total_frobenius_norm: 107.4074 - accuracy: 0.6862 - val_loss: 0.8318 - val_total_frobenius_norm: 109.2170 - val_accuracy: 0.7143\n",
      "Epoch 13/25\n",
      "1563/1563 [==============================] - 25s 16ms/step - loss: 0.8994 - total_frobenius_norm: 111.0745 - accuracy: 0.6894 - val_loss: 0.8612 - val_total_frobenius_norm: 112.8208 - val_accuracy: 0.7066\n",
      "Epoch 14/25\n",
      "1563/1563 [==============================] - 25s 16ms/step - loss: 0.8884 - total_frobenius_norm: 114.6693 - accuracy: 0.6941 - val_loss: 0.8849 - val_total_frobenius_norm: 116.3337 - val_accuracy: 0.6941\n",
      "Epoch 15/25\n",
      "1563/1563 [==============================] - 26s 16ms/step - loss: 0.8741 - total_frobenius_norm: 118.0906 - accuracy: 0.6970 - val_loss: 0.7996 - val_total_frobenius_norm: 119.6480 - val_accuracy: 0.7220\n",
      "Epoch 16/25\n",
      "1563/1563 [==============================] - 25s 16ms/step - loss: 0.8697 - total_frobenius_norm: 121.1728 - accuracy: 0.6996 - val_loss: 0.8461 - val_total_frobenius_norm: 122.7399 - val_accuracy: 0.7175\n",
      "Epoch 17/25\n",
      "1563/1563 [==============================] - 26s 16ms/step - loss: 0.8611 - total_frobenius_norm: 124.2182 - accuracy: 0.7065 - val_loss: 0.8434 - val_total_frobenius_norm: 125.6995 - val_accuracy: 0.7129\n",
      "Epoch 18/25\n",
      "1563/1563 [==============================] - 25s 16ms/step - loss: 0.8585 - total_frobenius_norm: 127.1024 - accuracy: 0.7052 - val_loss: 0.8021 - val_total_frobenius_norm: 128.5210 - val_accuracy: 0.7228\n",
      "Epoch 19/25\n",
      "1563/1563 [==============================] - 26s 16ms/step - loss: 0.8549 - total_frobenius_norm: 129.8488 - accuracy: 0.7056 - val_loss: 0.8045 - val_total_frobenius_norm: 131.1902 - val_accuracy: 0.7220\n",
      "Epoch 20/25\n",
      "1563/1563 [==============================] - 26s 16ms/step - loss: 0.8490 - total_frobenius_norm: 132.6015 - accuracy: 0.7070 - val_loss: 0.8407 - val_total_frobenius_norm: 133.9555 - val_accuracy: 0.7108\n",
      "Epoch 21/25\n",
      "1563/1563 [==============================] - 25s 16ms/step - loss: 0.8417 - total_frobenius_norm: 135.2648 - accuracy: 0.7102 - val_loss: 0.8092 - val_total_frobenius_norm: 136.5246 - val_accuracy: 0.7186\n",
      "Epoch 22/25\n",
      "1563/1563 [==============================] - 26s 16ms/step - loss: 0.8383 - total_frobenius_norm: 137.7860 - accuracy: 0.7142 - val_loss: 0.8178 - val_total_frobenius_norm: 139.0082 - val_accuracy: 0.7203\n",
      "Epoch 23/25\n",
      "1563/1563 [==============================] - 26s 16ms/step - loss: 0.8346 - total_frobenius_norm: 140.2362 - accuracy: 0.7142 - val_loss: 0.8172 - val_total_frobenius_norm: 141.4272 - val_accuracy: 0.7168\n",
      "Epoch 24/25\n",
      "1563/1563 [==============================] - 26s 16ms/step - loss: 0.8264 - total_frobenius_norm: 142.6461 - accuracy: 0.7161 - val_loss: 0.8399 - val_total_frobenius_norm: 143.7994 - val_accuracy: 0.7136\n",
      "Epoch 25/25\n",
      "1563/1563 [==============================] - 25s 16ms/step - loss: 0.8219 - total_frobenius_norm: 144.9404 - accuracy: 0.7172 - val_loss: 0.8296 - val_total_frobenius_norm: 145.9933 - val_accuracy: 0.7110\n"
     ]
    }
   ],
   "source": [
    "train_ds, val_ds = get_cifar10(32, augmentation=augmentation_model)\n",
    "model = ConvModel()\n",
    "model.compile(loss=tf.keras.losses.CategoricalCrossentropy(), optimizer=\"adam\")\n",
    "history_augment = model.fit(train_ds, validation_data=val_ds, epochs=25)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 188,
   "id": "8b9dff25-ea1f-4cd1-85a6-9440987ff591",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAigAAAGdCAYAAAA44ojeAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjYuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/av/WaAAAACXBIWXMAAA9hAAAPYQGoP6dpAABzKklEQVR4nO3deVxU9f7H8dfMAMMOsoMCgoLghqRiappbuZRltlhZai5tapl1K1s0b938lbeyxerebmmbZZu2aJr7lrviiiiCorKD7PvM+f1xdBRXUOAM8Hk+HvOAOXPOnM+M4Lz5nu+iUxRFQQghhBDCiui1LkAIIYQQ4kISUIQQQghhdSSgCCGEEMLqSEARQgghhNWRgCKEEEIIqyMBRQghhBBWRwKKEEIIIayOBBQhhBBCWB0brQuoDrPZTEpKCi4uLuh0Oq3LEUIIIUQ1KIpCQUEBAQEB6PU1axNpEAElJSWFwMBArcsQQgghxDU4ceIELVq0qNExDSKguLi4AOoLdHV11bgaIYQQQlRHfn4+gYGBls/xmmgQAeXsZR1XV1cJKEIIIUQDcy3dM6STrBBCCCGsjgQUIYQQQlgdCShCCCGEsDoNog+KEEJYI0VRqKysxGQyaV2KEJowGAzY2NjUyRQgElCEEOIalJeXk5qaSnFxsdalCKEpR0dH/P39sbOzq9XnlYAihBA1ZDabSUpKwmAwEBAQgJ2dnUwiKZocRVEoLy8nMzOTpKQkwsLCajwZ25VIQBFCiBoqLy/HbDYTGBiIo6Oj1uUIoRkHBwdsbW05fvw45eXl2Nvb19pzSydZIYS4RrX516IQDVVd/R7Ib5cQQgghrI4EFCGEEEJYHQkoQggh6oxOp2Px4sX1es4+ffowZcqUOj/PmDFjGDZsWJ2fp6mSgCKEEE2ATqe74u2111677LHHjh1Dp9MRGxtb63WNGTPmkvUkJCTU+rlq2/vvv8/8+fPr7Pnnz5+PTqdj0KBBVbbn5uai0+lYu3ZtnZ3bGjTpUTzLji1j06lN3N/mftp5tdO6HCGEqDOpqamW7xcuXMj06dOJj4+3bHN2dtaiLAAGDRrEvHnzqmzz9va+aL/y8vJan2vjeri5udX5OWxsbFi5ciVr1qyhb9++tfa81vZeXkqTbkFZnrScxQmL2ZK6RetShBANmKIoFJdXanJTFKVaNfr5+Vlubm5u6HQ6y30fHx/effddWrRogdFopFOnTixbtsxybEhICADR0dHodDr69OkDwPbt27nlllvw8vLCzc2Nm2++mV27dtX4/TMajVXq8/Pzw2Aw0KdPHyZNmsSUKVPw8vJi4MCBAKxbt46YmBiMRiP+/v68+OKLVFZWVnnOyspKJk2ahJubG15eXrz66qtV3quysjKee+45mjdvjpOTE926davSIjF//nzc3d1Zvnw5kZGRODs7M2jQoCpB78JLPC1btmTOnDlV6ujUqZOldUpRFF577TWCgoIwGo0EBATw1FNPXfG9cXJyYuzYsbz44otX3G/fvn3069cPBwcHPD09efTRRyksLLyo1n/9618EBATQpk0bS8vYDz/8QK9evXBwcKBr164cPnyY7du306VLF5ydnRk8eDCZmZlXPH9daNItKJ18OrEyeSWxGbFalyKEaMBKKky0nb5ck3Mf/OdAHO2u77/y999/n3feeYf//Oc/REdH88UXX3DHHXdw4MABwsLC2LZtGzExMaxcuZJ27dpZ/vIuKChg9OjRfPjhhyiKwjvvvMOQIUM4cuQILi4utfHy+PLLL3niiSfYtGkTAKdOnWLIkCGMGTOGr776ikOHDjFhwgTs7e2rXKb68ssvGTduHNu2bWPHjh08+uijBAUFMWHCBAAmTZrEwYMH+f777wkICGDRokUMGjSIffv2ERYWBkBxcTH//ve/+frrr9Hr9Tz00EM899xzfPvtt9f0Wn7++Wfee+89vv/+e9q1a0daWhp79uy56nGvvfYarVu35qeffuKee+656PGioiIGDhxI9+7d2b59OxkZGYwfP55JkyZVuQS1atUqXF1dWbFiRZXjZ8yYwZw5cwgKCmLs2LE8+OCDuLi48P777+Po6Mh9993H9OnT+eSTT67pdV+rJh1Qon2iAYjNjEVRFJkJUgjRJP373//mhRde4P777wfgrbfeYs2aNcyZM4e5c+daLrd4enri5+dnOa5fv35Vnue///0v7u7urFu3jttvv73a5//jjz+qXGIaPHgwP/74IwBhYWG8/fbblsdefvllAgMD+eijj9DpdERERJCSksILL7zA9OnTLXNyBAYG8t5776HT6WjTpg379u3jvffeY8KECSQnJzNv3jySk5MJCAgA4LnnnmPZsmXMmzePN998E4CKigo+/fRTWrVqBaih5p///Ge1X9eFkpOT8fPzY8CAAdja2hIUFERMTMxVjwsICODpp5/m5ZdfvmSn3AULFlBaWspXX32Fk5MTAB999BFDhw7lrbfewtfXF1BbY/73v/9ZAuaxY8csr/1s69TTTz/NAw88wKpVq+jZsycA48aNq9O+NpfTpANKpEckRoOR3LJcjuUfI8QtROuShBANkIOtgYP/HKjZua9Hfn4+KSkplg+js3r27HnVv+7T09N55ZVXWLt2LRkZGZhMJoqLi0lOTq5RDX379q3y1/nZD1mAzp07V9k3Li6O7t27V/mDsmfPnhQWFnLy5EmCgoIAuPHGG6vs0717d9555x1MJhP79u3DZDIRHh5e5bnLysrw9PS03Hd0dLSEEwB/f38yMjJq9NrOd++99zJnzhxCQ0MZNGgQQ4YMYejQodjYXP2j+IUXXuA///kPX3zxBffdd1+Vx+Li4oiKiqryvvXs2ROz2Ux8fLwloHTo0OGS/U46duxo+f78fc/fdj2v+1o16YBia7ClnWc7dmXsIjYjVgKKEOKa6HS6677M0hCNHj2a7Oxs3n//fYKDgzEajXTv3p3y8vIaPY+TkxOtW7e+7GO1rbCwEIPBwM6dOzEYqga881tybG1tqzym0+mu2OdHr9df9HhFRYXl+8DAQOLj41m5ciUrVqzgySefZPbs2axbt+6ic13I3d2dadOmMXPmzBq1Tp3vcu/l+ec+G+ou3GY2m6/pnNejSXeShXOXeXZn7Na4EiGEqH+urq4EBARY+nictWnTJtq2bQtg+avbZDJdtM9TTz3FkCFDaNeuHUajkaysrDqtNzIyks2bN1cJAps2bcLFxYUWLVpYtm3durXKcVu2bCEsLAyDwUB0dDQmk4mMjAxat25d5Xb+Jaya8vb2rtKJNj8/n6SkpCr7ODg4MHToUD744APWrl3L5s2b2bdvX7Wef/Lkyej1et5///0q2yMjI9mzZw9FRUWWbZs2bUKv19OmTZtrfj1ak4AiAUUI0cT94x//4K233mLhwoXEx8fz4osvEhsby9NPPw2Aj48PDg4OLFu2jPT0dPLy8gC1f8jXX39NXFwcW7duZeTIkTg4ONRprU8++SQnTpxg8uTJHDp0iF9//ZUZM2YwderUKmvCJCcnM3XqVOLj4/nuu+/48MMPLa8nPDyckSNHMmrUKH755ReSkpLYtm0bs2bNYsmSJddcW79+/fj666/ZsGED+/btY/To0VVaaObPn8/nn3/O/v37SUxM5JtvvsHBwYHg4OBqPb+9vT0zZ87kgw8+qLJ95MiR2NvbM3r0aPbv38+aNWuYPHkyDz/8sOWSTUPU5ANKlHcUAMfyj3G69LTG1QghRP176qmnmDp1Ks8++ywdOnRg2bJl/Pbbb5bRLDY2NnzwwQf85z//ISAggDvvvBOAzz//nNOnT3PDDTfw8MMP89RTT+Hj41OntTZv3pylS5eybds2oqKiePzxxxk3bhyvvPJKlf1GjRpFSUkJMTExTJw4kaeffppHH33U8vi8efMYNWoUzz77LG3atGHYsGFs377d0oflWkybNo2bb76Z22+/ndtuu41hw4ZV6cPi7u7OZ599Rs+ePenYsSMrV67k999/r9Lv5WpGjx5NaGholW2Ojo4sX76cnJwcunbtyj333EP//v356KOPrvm1WAOdUt1B9GesX7+e2bNns3PnTlJTU1m0aNFVp/otKyvjn//8J9988w1paWn4+/szffp0xo4dW61z5ufn4+bmRl5eHq6urjUpt1ruWHwHSXlJfNjvQ/oE9qn15xdCNC6lpaUkJSUREhJSq8vLC9EQXen34Xo+v2vcglJUVERUVBRz586t9jH33Xcfq1at4vPPP7c0t1nTdTG5zCOEEEJYlxp3Ox88eDCDBw+u9v7Lli1j3bp1JCYm4uHhAaiz7VmTTt6d+OXILzJhmxBCCGEl6rwPym+//UaXLl14++23ad68OeHh4Tz33HOUlJRc9piysjLy8/Or3OpSJ59OABzIPkCFqeLKOwshhBCiztV5QElMTGTjxo3s37+fRYsWMWfOHH766SeefPLJyx4za9Ys3NzcLLfAwMA6rbGla0vcje6Umco4mHOwTs8lhBBCiKur84BiNpvR6XR8++23xMTEMGTIEN59912+/PLLy7aiTJs2jby8PMvtxIkTdVqjTqejk3cnALnMI4QQQliBOg8o/v7+NG/evMqy1JGRkSiKwsmTJy95jNFoxNXVtcqtrp29zCMBRQghhNBenQeUnj17kpKSUmXZ58OHD6PX66vM+qe180fy1HDktRBCCCFqWY0DSmFhIbGxscTGxgKQlJREbGysZXGoadOmMWrUKMv+Dz74IJ6enjzyyCMcPHiQ9evX849//IOxY8fW+YyDNdHWsy02ehuyS7M5WXjplh0hhBBC1I8aB5QdO3YQHR1NdLTa4jB16lSio6OZPn06AKmpqVVWsnR2dmbFihXk5ubSpUsXRo4caVmHwJrY29jT1lNdd0Iu8wghxKX16dOHKVOmWO63bNmSOXPmXPEYnU7H4sWLr/vctfU8omGo8Twoffr0ueIlkPnz51+0LSIighUrVtT0VPUu2juavZl72Z2xm6GthmpdjhBC1JqhQ4dSUVHBsmXLLnpsw4YN9O7dmz179tCxY8caPe/27dtrfcXh1157jcWLF1ta6s9KTU2lWbNmtXquC82fP58pU6aQm5tbp+cRV9fk1+I5n8woK4RorMaNG8eKFSsuOThh3rx5dOnSpcbhBNQVfB0dHWujxKvy8/PDaDTWy7mE9iSgnCfKR1048GjuUfLL63ZyOCGEqE+333473t7eF7VyFxYW8uOPPzJu3Diys7N54IEHaN68OY6OjnTo0IHvvvvuis974SWeI0eO0Lt3b+zt7Wnbtu0lW89feOEFwsPDcXR0JDQ0lFdffZWKCnWSzPnz5zNz5kz27NmDTqdDp9NZar7wEs++ffvo168fDg4OeHp68uijj1YZkDFmzBiGDRvGv//9b/z9/fH09GTixImWc12L5ORk7rzzTpydnXF1deW+++4jPT3d8viePXvo27cvLi4uuLq60rlzZ3bs2AHA8ePHGTp0KM2aNcPJyYl27dqxdOnSa66lsavxJZ7GzMvBi0CXQE4UnGBv5l5uan6T1iUJIRoCRYGKYm3ObesIOt1Vd7OxsWHUqFHMnz+fl19+Gd2ZY3788UdMJhMPPPAAhYWFdO7cmRdeeAFXV1eWLFnCww8/TKtWrYiJibnqOcxmM8OHD8fX15etW7eSl5dXpb/KWS4uLsyfP5+AgAD27dvHhAkTcHFx4fnnn2fEiBHs37+fZcuWsXLlSoAq01ScVVRUxMCBA+nevTvbt28nIyOD8ePHM2nSpCohbM2aNfj7+7NmzRoSEhIYMWIEnTp1YsKECVd9PZd6fWfDybp166isrGTixImMGDGCtWvXAjBy5Eiio6P55JNPMBgMxMbGYmtrC8DEiRMpLy9n/fr1ODk5cfDgQZydnWtcR1MhAeUC0T7RnCg4we6M3RJQhBDVU1EMbwZoc+6XUsCuen1Axo4dy+zZs1m3bh19+vQB1Ms7d999t2Xm7ueee86y/+TJk1m+fDk//PBDtQLKypUrOXToEMuXLycgQH0/3nzzzYvWb3vllVcs37ds2ZLnnnuO77//nueffx4HBwecnZ2xsbHBz8/vsudasGABpaWlfPXVV5Y+MB999BFDhw7lrbfewtfXF4BmzZrx0UcfYTAYiIiI4LbbbmPVqlXXFFBWrVrFvn37SEpKssxw/tVXX9GuXTu2b99O165dSU5O5h//+AcREREAhIWFWY5PTk7m7rvvpkOHDgCEhobWuIamRC7xXCDKW73Msydjj8aVCCFE7YqIiKBHjx588cUXACQkJLBhwwbGjRsHgMlk4vXXX6dDhw54eHjg7OzM8uXLq4zMvJK4uDgCAwMt4QSge/fuF+23cOFCevbsiZ+fH87OzrzyyivVPsf554qKiqrSQbdnz56YzWbi4+Mt29q1a4fBYLDc9/f3JyMjo0bnOv+cgYGBVZZfadu2Le7u7sTFxQHqyNbx48czYMAA/u///o+jR49a9n3qqad444036NmzJzNmzGDv3r3XVEdTIS0oFzjbUXZv1l4qzZXY6OUtEkJcha2j2pKh1blrYNy4cUyePJm5c+cyb948WrVqxc033wzA7Nmzef/995kzZw4dOnTAycmJKVOmUF5eXmvlbt68mZEjRzJz5kwGDhyIm5sb33//Pe+8806tneN8Zy+vnKXT6TCbzXVyLlBHID344IMsWbKEP//8kxkzZvD9999z1113MX78eAYOHMiSJUv466+/mDVrFu+88w6TJ0+us3oaMmlBuUAr91a42LpQUllC/On4qx8ghBA6nXqZRYtbNfqfnO++++5Dr9ezYMECvvrqK8aOHWvpj7Jp0ybuvPNOHnroIaKioggNDeXw4cPVfu7IyEhOnDhBamqqZduWLVuq7PP3338THBzMyy+/TJcuXQgLC+P48eNV9rGzs8NkMl31XHv27KGoqMiybdOmTej1etq0aVPtmmvi7Os7f324gwcPkpubS9u2bS3bwsPDeeaZZ/jrr78YPnw48+bNszwWGBjI448/zi+//MKzzz7LZ599Vie1NgYSUC6g1+np6KMOtZMJ24QQjY2zszMjRoxg2rRppKamMmbMGMtjYWFhrFixgr///pu4uDgee+yxKiNUrmbAgAGEh4czevRo9uzZw4YNG3j55Zer7BMWFkZycjLff/89R48e5YMPPmDRokVV9mnZsqVllvKsrCzKysouOtfIkSOxt7dn9OjR7N+/nzVr1jB58mQefvhhS/+Ta2UymSwzpp+9xcXFMWDAADp06MDIkSPZtWsX27ZtY9SoUdx888106dKFkpISJk2axNq1azl+/DibNm1i+/btREZGAjBlyhSWL19OUlISu3btYs2aNZbHxMUkoFxCtLd6mUcCihCiMRo3bhynT59m4MCBVfqLvPLKK9xwww0MHDiQPn364Ofnx7Bhw6r9vHq9nkWLFlFSUkJMTAzjx4/nX//6V5V97rjjDp555hkmTZpEp06d+Pvvv3n11Ver7HP33XczaNAg+vbti7e39yWHOjs6OrJ8+XJycnLo2rUr99xzD/379+ejjz6q2ZtxCYWFhZYZ08/ehg4dik6n49dff6VZs2b07t2bAQMGEBoaysKFCwEwGAxkZ2czatQowsPDue+++xg8eDAzZ84E1OAzceJEIiMjGTRoEOHh4Xz88cfXXW9jpVMawMp4+fn5uLm5kZeXVy8rG29L3ca4v8bh6+jLyntX1vn5hBANS2lpKUlJSYSEhGBvb691OUJo6kq/D9fz+S0tKJfQ3qs9Bp2B9OJ0UgtTr36AEEIIIWqVBJRLcLR1pI2H2skqNjNW22KEEEKIJkgCymXIujxCCCGEdiSgXEYnn06AdJQVQgghtCAB5TI6eXcCIP50PMVarbEhhBBCNFESUC7Dz8kPfyd/zIqZvVkyHbEQQghRnySgXMHZyzzSD0UIIYSoXxJQruDsZR5ZOFAIIYSoXxJQruDsSJ49mXswma+8LoQQQgghao8ElCsIaxaGo40jhRWFJOQmaF2OEEII0WRIQLkCG70NHbw7AGorihBCNHRjxoyp0fo6QmhFAspVyIRtQgghRP2TgHIVZ1c2loAihGjs1q1bR0xMDEajEX9/f1588UUqKystj//000906NABBwcHPD09GTBgAEVFRQCsXbuWmJgYnJyccHd3p2fPnhw/flyrlyIaARutC7B2Hbw7oEPHqcJTZBZn4u3orXVJQggroygKJZUlmpzbwcYBnU533c9z6tQphgwZwpgxY/jqq684dOgQEyZMwN7entdee43U1FQeeOAB3n77be666y4KCgrYsGEDiqJQWVnJsGHDmDBhAt999x3l5eVs27atVuoSTZcElKtwsXMhrFkYh08fJjYzlluCb9G6JCGElSmpLKHbgm6anHvr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\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(history_augment.history[\"total_frobenius_norm\"]/np.max(history_augment.history[\"total_frobenius_norm\"]) * np.max(history_augment.history[\"val_loss\"]))\n",
    "plt.plot(history_augment.history[\"val_loss\"])\n",
    "plt.plot(history_augment.history[\"loss\"])\n",
    "plt.legend(labels=[\"Total Frobenius Norm\", \"Validation Loss\", \"Loss\"])\n",
    "plt.savefig(\"convnet_augment_reg.svg\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "44af7c76-d3f9-477e-8f34-fde5af06cc9c",
   "metadata": {
    "tags": []
   },
   "source": [
    "## Training the same model with only dropout between layers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 194,
   "id": "b9d7d83a-482a-4ef2-9e1b-ea2d3e5265d6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/25\n",
      "1563/1563 [==============================] - 7s 4ms/step - loss: 1.7728 - total_frobenius_norm: 32.9615 - accuracy: 0.3521 - val_loss: 1.5310 - val_total_frobenius_norm: 40.0662 - val_accuracy: 0.4544\n",
      "Epoch 2/25\n",
      "1563/1563 [==============================] - 6s 4ms/step - loss: 1.4500 - total_frobenius_norm: 45.1687 - accuracy: 0.4718 - val_loss: 1.3331 - val_total_frobenius_norm: 49.5544 - val_accuracy: 0.5230\n",
      "Epoch 3/25\n",
      "1563/1563 [==============================] - 6s 4ms/step - loss: 1.3697 - total_frobenius_norm: 53.4661 - accuracy: 0.5051 - val_loss: 1.2858 - val_total_frobenius_norm: 57.2244 - val_accuracy: 0.5377\n",
      "Epoch 4/25\n",
      "1563/1563 [==============================] - 6s 4ms/step - loss: 1.3177 - total_frobenius_norm: 60.4867 - accuracy: 0.5288 - val_loss: 1.2855 - val_total_frobenius_norm: 63.6399 - val_accuracy: 0.5495\n",
      "Epoch 5/25\n",
      "1563/1563 [==============================] - 7s 4ms/step - loss: 1.2737 - total_frobenius_norm: 66.6663 - accuracy: 0.5431 - val_loss: 1.2338 - val_total_frobenius_norm: 69.6740 - val_accuracy: 0.5681\n",
      "Epoch 6/25\n",
      "1563/1563 [==============================] - 6s 4ms/step - loss: 1.2503 - total_frobenius_norm: 72.5231 - accuracy: 0.5530 - val_loss: 1.2376 - val_total_frobenius_norm: 75.1994 - val_accuracy: 0.5638\n",
      "Epoch 7/25\n",
      "1563/1563 [==============================] - 7s 4ms/step - loss: 1.2316 - total_frobenius_norm: 78.0355 - accuracy: 0.5619 - val_loss: 1.1690 - val_total_frobenius_norm: 80.9044 - val_accuracy: 0.5875\n",
      "Epoch 8/25\n",
      "1563/1563 [==============================] - 6s 4ms/step - loss: 1.2101 - total_frobenius_norm: 83.3130 - accuracy: 0.5674 - val_loss: 1.2128 - val_total_frobenius_norm: 85.7227 - val_accuracy: 0.5752\n",
      "Epoch 9/25\n",
      "1563/1563 [==============================] - 6s 4ms/step - loss: 1.1951 - total_frobenius_norm: 87.9957 - accuracy: 0.5744 - val_loss: 1.1926 - val_total_frobenius_norm: 90.2701 - val_accuracy: 0.5839\n",
      "Epoch 10/25\n",
      "1563/1563 [==============================] - 6s 4ms/step - loss: 1.1780 - total_frobenius_norm: 92.4834 - accuracy: 0.5799 - val_loss: 1.1212 - val_total_frobenius_norm: 94.5685 - val_accuracy: 0.6051\n",
      "Epoch 11/25\n",
      "1563/1563 [==============================] - 6s 4ms/step - loss: 1.1652 - total_frobenius_norm: 96.6108 - accuracy: 0.5864 - val_loss: 1.1136 - val_total_frobenius_norm: 98.5884 - val_accuracy: 0.6038\n",
      "Epoch 12/25\n",
      "1563/1563 [==============================] - 7s 4ms/step - loss: 1.1604 - total_frobenius_norm: 100.5787 - accuracy: 0.5886 - val_loss: 1.1801 - val_total_frobenius_norm: 102.6543 - val_accuracy: 0.5789\n",
      "Epoch 13/25\n",
      "1563/1563 [==============================] - 6s 4ms/step - loss: 1.1496 - total_frobenius_norm: 104.3884 - accuracy: 0.5914 - val_loss: 1.0971 - val_total_frobenius_norm: 106.1816 - val_accuracy: 0.6247\n",
      "Epoch 14/25\n",
      "1563/1563 [==============================] - 6s 4ms/step - loss: 1.1420 - total_frobenius_norm: 107.8597 - accuracy: 0.5943 - val_loss: 1.1366 - val_total_frobenius_norm: 109.5412 - val_accuracy: 0.6072\n",
      "Epoch 15/25\n",
      "1563/1563 [==============================] - 6s 4ms/step - loss: 1.1329 - total_frobenius_norm: 111.1656 - accuracy: 0.5992 - val_loss: 1.1076 - val_total_frobenius_norm: 112.8361 - val_accuracy: 0.6148\n",
      "Epoch 16/25\n",
      "1563/1563 [==============================] - 7s 4ms/step - loss: 1.1274 - total_frobenius_norm: 114.5022 - accuracy: 0.5996 - val_loss: 1.0881 - val_total_frobenius_norm: 116.1446 - val_accuracy: 0.6235\n",
      "Epoch 17/25\n",
      "1563/1563 [==============================] - 7s 4ms/step - loss: 1.1195 - total_frobenius_norm: 117.8143 - accuracy: 0.6016 - val_loss: 1.1113 - val_total_frobenius_norm: 119.5664 - val_accuracy: 0.6219\n",
      "Epoch 18/25\n",
      "1563/1563 [==============================] - 6s 4ms/step - loss: 1.1135 - total_frobenius_norm: 121.2247 - accuracy: 0.6032 - val_loss: 1.1426 - val_total_frobenius_norm: 122.7906 - val_accuracy: 0.6078\n",
      "Epoch 19/25\n",
      "1563/1563 [==============================] - 6s 4ms/step - loss: 1.1128 - total_frobenius_norm: 124.3797 - accuracy: 0.6078 - val_loss: 1.1180 - val_total_frobenius_norm: 126.0365 - val_accuracy: 0.6118\n",
      "Epoch 20/25\n",
      "1563/1563 [==============================] - 7s 4ms/step - loss: 1.1086 - total_frobenius_norm: 127.5446 - accuracy: 0.6053 - val_loss: 1.1422 - val_total_frobenius_norm: 129.0414 - val_accuracy: 0.6100\n",
      "Epoch 21/25\n",
      "1563/1563 [==============================] - 6s 4ms/step - loss: 1.1069 - total_frobenius_norm: 130.3969 - accuracy: 0.6061 - val_loss: 1.0701 - val_total_frobenius_norm: 131.7579 - val_accuracy: 0.6296\n",
      "Epoch 22/25\n",
      "1563/1563 [==============================] - 6s 4ms/step - loss: 1.0976 - total_frobenius_norm: 133.1779 - accuracy: 0.6115 - val_loss: 1.2376 - val_total_frobenius_norm: 134.5598 - val_accuracy: 0.5919\n",
      "Epoch 23/25\n",
      "1563/1563 [==============================] - 6s 4ms/step - loss: 1.0969 - total_frobenius_norm: 135.9971 - accuracy: 0.6097 - val_loss: 1.1448 - val_total_frobenius_norm: 137.3474 - val_accuracy: 0.6096\n",
      "Epoch 24/25\n",
      "1563/1563 [==============================] - 7s 4ms/step - loss: 1.1039 - total_frobenius_norm: 138.7543 - accuracy: 0.6095 - val_loss: 1.0142 - val_total_frobenius_norm: 140.1887 - val_accuracy: 0.6487\n",
      "Epoch 25/25\n",
      "1563/1563 [==============================] - 6s 4ms/step - loss: 1.0966 - total_frobenius_norm: 141.6239 - accuracy: 0.6133 - val_loss: 1.0772 - val_total_frobenius_norm: 143.0363 - val_accuracy: 0.6219\n"
     ]
    }
   ],
   "source": [
    "train_ds, val_ds = get_cifar10(32, augmentation=None)\n",
    "model = ConvModel(L2_reg=0, dropout_rate=0.5)\n",
    "model.compile(loss=tf.keras.losses.CategoricalCrossentropy(), optimizer=\"adam\")\n",
    "history_dropout = model.fit(train_ds, validation_data=val_ds, epochs=25)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 195,
   "id": "b0e6efb2-7c53-4be5-9116-3591d1540e95",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(history_dropout.history[\"total_frobenius_norm\"]/np.max(history_dropout.history[\"total_frobenius_norm\"]) * np.max(history_dropout.history[\"val_loss\"]))\n",
    "plt.plot(history_dropout.history[\"val_loss\"])\n",
    "plt.plot(history_dropout.history[\"loss\"])\n",
    "plt.legend(labels=[\"Total Frobenius Norm\", \"Validation Loss\", \"Loss\"])\n",
    "plt.savefig(\"convnet_dropout_reg.svg\")\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
